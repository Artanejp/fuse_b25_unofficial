0.3での変更点
- 必要なPSIの取得方式の変更: (ユーザ指示で)dvrNに流れてきたデータから取得するのではなく,
  fuse_b25内部で独自に取得する方式に変更.
    -> MythTVなどのように, PSIを個別にdemuxNから取り出して
       dvr0にはPID毎に必要になった段階で追加していく様なアプリでも動作するように.

- EIT内での開始時間をUTCに変換する機能とオプションの追加 -> 欧州DVB規格に合わせられるように.
  ただしdvr0から出力される場合のみ. demuxerから取り出される場合には非対応.

- fuse_b25用オプションのヘルプ表示追加(-h, --helpで)

0.2 -> 0.2.1 の変更点
出力の頭に(大量の)PSIパケットが出力される問題を修正
  -> プレーヤーで 音声や映像ストリームが認識されない場合がある問題を回避
より安全なopen/close
  -> クライアントの使用開始/終了時にfuse_b25(やクライアント?)がハングする可能性を減らす
BCASカードのリセット方法の修正, 多少早く復号が開始されるように
頻繁に出力されるログメッセージの廃止他 小バグ修正
復号準備が整うまで 未復号のパケットが出力されるバグの修正


*0.1系バージョンからの変更点*
今までとはマウントポイントを変更.  それに伴い, rendvr0を廃止.
代わりにb25dvr を使ってダミーのdvbデバイスを作成し,そこにマウントする.
アプリからはダミーの方のdvbデバイスのアダプタ番号を使ってアクセスする.

例： /dev/dvb/adapter1/dvr0 にfuse_b25をかぶせるために
     ディレクトリ/dev/dvb/adapter9を作成,

 /dev/dvb/adapter9/frontendX -> /dev/dvb/adapter1/frontendX
                   demuxY ->    /dev/dvb/adapter1/demuxY
                   (その他dvrZ以外のサブデバイスがあれば同様にsymlink)
                   dvrZ         空のファイルを作成

 上記を行うのが"helper/b25dvr 1 [9]" ([]内は省略可, 省略すると+8を使用)

 その後, fuse_b25 /dev/dvb/adapter9/dvr0 [--target /dev/dvb/adapter1/dvr0]
         mplayer dvb://9@NHK など
             (以下 元に戻す場合)
         sudo umount /dev/dvb/adapter9/dvr0
         sudo rm -r /dev/dvb/adapter9

0.1系では:
 fuse_b25をマウントしたいDVBデバイス/dev/dvb/adapterN/の
 dvr0をdvr_b25に移動した上で 空のファイル/dev/dvb/adapterN/dvr0を作り
 そこにマウントしていた. アプリからはアダプタ番号Nをそのまま使用していた.)

0.1系の方式の問題点:
 サスペンド/レジュームの時に 非対応のモジュールを入れ直したり,
 USBデバイスを差し直したりして, デバイスが一旦消えてまた作り直される際に,
 デバイスファイルdvr_b25が(消去された旧デバイスのdvr0のまま)残って
 おかしくなり, 正しくデバイスのDVR0へアクセス出来なくなる.
(PT1/2はサスペンドレジュームできないので必然的にモジュールの入れ直しとなる.)
 ただしudevのruleで明示的に作り直しに対応していればOK

新方式のメリット:
-上記のようなデバイスの作り直しが発生しても,
 fuse_b25やダミーのDVBデバイスのディレクトリをそのまま継続使用できる.
-復号が不要な録画系アプリとかは, fuse_b25が死んだ場合でもそのまま
 元の(b25dvrで作成したダミーのデバイスでない)DVBデバイスを使用できる場合がある.
-元に戻すのが楽. ダミーDVBデバイスのディレクトリを消去するだけ.
 元のDVBデバイスのディレクトリを変更しないので そもそも元に戻す必要性がない.

新方式のデメリット:
-DVBデバイスの数が増える. アプリによってはDVBデバイス(アダプタ)の数に上限がある.
-アプリから使用するときの DVBデバイス(アダプタ)の番号が変わる.
 アプリによってはアダプタ番号の指定ができず0固定のものもあるかも.
 その場合, DVBドライバのモジュールのオプションadapter_nrを使用して,
 元の番号を0以外に指定した上で b25dvr, fuse_b25に適切なオプションを使用する.
  /etc/modprobe.d/earth-pt1.confに"options earth-pt1 adapter_nr=1,2,3,4"を追加
  b25dvr 1 0
  fuse_b25 /dev/dvb/adapter0/dvr0 --target /dev/dvb/adapter1/dvr0
  --> mplayer dvb://NHK, vlc dvb://??....

-------------------------------------------------------
fuse_b25 (新バージョン)
/dev/dvb/adapterN/dvrXへのI/Oを中継して MULTI2復号をするFUSEファイルシステム.
プレーヤ等のアプリには 普通の(スクランブルしていない)DVBとして見えるため
復号パッチ当てが不要で そのまま使用できる.
ファイルシステムと言っても１つのファイル(dvr0)にマウントし
そのファイルしか見せない特殊な形態.

使い方
I. マウント
step 0: 中継用のダミーDVBデバイス+マウントポイント作成
  $# b25dvr N [M]
        中身は以下と同様
  $# mkdir /dev/dvb/adapterM; cd /dev/dvb/adapterM
  $# touch dvr0; chgrp video dvr0; chmod 0660 dvr0
  $# ln -s /dev/dvb/adapterN/frontend0
  $# ln -s /dev/dvb/adapterN/demux0

step 1: マウント
$ fuse_b25 /dev/dvb/adapterM/dvr0 [-oallow_other] [--target /dev/dvb/adapterN/dvr0] [--conv] [--eit]

  targetを指定しないと /dev/dvb/adapter(M-8)/dvr0を仮定

あとは通常どおりmplayer dvb://M@NHK とかmythtv起動とか
アダプタの番号としてNでなくMを使用することに注意

II. アンマウント
step 0: アンマウント
$ fusermount -u /dev/dvb/adapterM/dvr0
あるいは
$# umount /dev/dvb/adapterM/dvr0

step 1: ダミーデバイスの消去 (省略可?) 
$# rm -r /dev/dvb/adapterM
 (元の/dev/dvb/adapterNでは無い点に注意)


オプション:
--target <dir>  中継したいDVBデバイスのdvrサブデバイスへのパス
-oallow_other	マウントしたユーザ以外にもアクセスを認める
--conv		NITとSDT内のテキストをUTF-8に変換する
--eit		EIT内のテキストをUTF-8に変換する (experimental)
-f		起動後でバックグラウンドに移行しない (主にデバッグ用)

後はFUSEのサイトのドキュメントとかも参照
http://fuse.sourceforge.net/ 特にFAQやWiki


注意:
-アプリはそのまま使用できるとは言っても
 復号後のストリームがそのまま再生できればの話.
AACのチャネル構成変化とかで別途パッチ当てしないと動かない場合もある.

-BCASカードがエラー起こしたり使用不能の場合は
 ワンセグ以外何も出力されないことになるのに注意
 特に録画しておいてカードエラーで失敗しても
 後から(カードが復旧してから)復号する, ということは*できない*ので注意.

- FUSEでは通常 マウントしたユーザ以外は使用できない点に注意.
  -oallow_otherオプションを付ければ他のユーザも
 (パーミッションが得られれば)アクセスできるが,
  このオプションをルート以外が使用するには
  /etc/fuse.conf にuser_allow_otherという行を含める必要がある.

- テキストの長さが変換に伴い２倍程に増加する. 
  EITの変換において,仕様上収まらなくなる場合があり
  その場合には強制的に尻切れ状態のEITテーブルが出力される

- テキスト変換したNIT,SDT,EITのCRCは正しくない値(再計算していない)

- テキスト変換はあくまでdvr0から出力されるNIT,SDT,EITのみが対象
  フィルターをセットして/dev/dvb/adaperM/demuxNデバイスから直接読み出すアプリ
  (例えばtv_grab_dvb みたいな)には非対応. 
  原理的には demuxN デバイスもdvr0のようにI/Oを中継・変換が可能だけれど
  実装がややこしくなるのと, 尻切れの発生の問題と,
  アプリにパッチ当てる方が簡単っぽいので.
  (現時点での利用アプリはなし？)


fuse_b25.org (旧バージョン)
 以前(-ver 0.1.1)のfuse_b25.
 マウントポイント->中継先DVRデバイス名の導き方が違うだけで動作自体は同じ.


サポートツール
- helper/80-fuse-b25.rules
 上記使い方での 中継用ダミーデバイスの作成とfuse_b25のマウント,およびその逆を行う
 udevルールファイル.
 (バイナリのインストールパスやデバイスの選択条件については調整が必要な可能性あり)
 デバイスの追加/削除時に自動的に実行されるので,ユーザの手間はなくなるが
 fuse_b25はルートでの実行になるので注意.
 また 多少の修正でダミーデバイスのみ作成しfuse_b25を起動しないようにすることも可
  注意: RPMではインストールされないので,/usr/local/share/doc/fuse_b25.../から
       /etc/udev/rules.dにコピーし, (必要であれば)修正して使用する.

- helper/b25dvr
 上記使い方でのダミーのDVBデバイス, マウントポイントの作成を行うスクリプト. 
 適切なパーミッションが必要
 使い方は上記の"本バージョンでの変更点"を参照
 
- helper/bin/b25dvr, helper/console.apps/b25dvr, helper/pam.d/b25dvr
  上記b25dvrをコンソールユーザが使用するための pam_console用ファイル
 インストール方法は ./fuse_b25.spec を参照

- helper/rendvr0
   旧版のfuse_b25(fuse_b25.org)用のサポートツール. 本バージョンでは使用しない


ビルド方法
 ./configure [options...]; make
 ./src/fuse_b25が作成される
 (pcsc-lite-devel やfuse-develが必要)
 Fedora用のspecファイルも含めてあるので srpmからビルド/インストールも可能

